package com.bridglabz.datastructures2;

public class LinkedListInt {
	public NodeA head;
	public int size;
	//for display the list
	public void display() {
		System.out.println("Link list");
		NodeA tempNode=head;
		while (tempNode!=null)
		{
			System.out.println(""+ tempNode.data);
			tempNode=tempNode.next;
		}
	}
	//adding element front
	public void addAtBegin(int data) {
		NodeA n=new NodeA(data);
		n.data=data;
		if(head ==null)
		{ 
			head=n;
		}
		else
		{
			n.next=head;
			head=n;
		}
		size++;
	}
	//adding element at end
	public void addAtEnd(int data) {
		NodeA n=new NodeA(data);
		NodeA temp = head;
		while(temp.next!=null) {
		temp = temp.next;
		}
		temp.next=n;
		size++;
	}
	//adding element at position
	public void addAtPos(int data, int pos) {
		NodeA n=new NodeA(data);
		NodeA temp=head;
		if(head==null)
		{
			addAtBegin(data);
		}
		else {
			int count=1;
			while(count<pos-1) {
				temp=temp.next;
				count++;
		}          
		n.next=temp.next;
		temp.next=n;
		size++;
		}
	}
	//deleting element at given position
	public void deleteAtPos(int pos){
		NodeA temp= head;
		
		int count=1;
		while(count< pos-1) {
		temp= temp.next;
			count++;
		}
		NodeA temp1=temp.next;
		temp.next=temp1.next;
		temp1=null;
		size--;
		}
	//deleting element at starting position	
	public void deleteAtBegin() {
		NodeA temp = head;
		head = head.next;
		temp=null;
		size--;
		}
	//deleting element at end position
	public void deleteAtEnd() {
		NodeA temp= head;
		while(temp.next==null) {
		temp= temp.next;
		}
		head = head.next;
		temp=null;
		size--;
	}
	//obtaining element at given position
	public int elementAt(int pos){
		
		if(pos>size){
			return -1;
		}
		NodeA n = head;
		while(pos-1!=0){
			n=n.next;
		pos--;
		}
		return n.data;
		}
		
	//searching the position of given data
	public int search(int data){
		NodeA n = head;
		int count = 1;
		while(n!=null){
		
			if(n.data==data)
			{
				return count;
			}
			else
			{
				n = n.next;
				count++;
			}
		}
			return -1;
		}
	//checking elements present
	public boolean isEmpty()
	{
		return head == null;
	}
}